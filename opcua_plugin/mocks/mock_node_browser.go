// Code generated by MockGen. DO NOT EDIT.
// Source: opcua_node_wrapper.go
//
// Generated by this command:
//
//	mockgen -source=opcua_node_wrapper.go -destination=mocks/mock_node_browser.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	ua "github.com/gopcua/opcua/ua"
	opcua_plugin "github.com/united-manufacturing-hub/benthos-umh/opcua_plugin"
	gomock "go.uber.org/mock/gomock"
)

// MockNodeBrowser is a mock of NodeBrowser interface.
type MockNodeBrowser struct {
	ctrl     *gomock.Controller
	recorder *MockNodeBrowserMockRecorder
	isgomock struct{}
}

// MockNodeBrowserMockRecorder is the mock recorder for MockNodeBrowser.
type MockNodeBrowserMockRecorder struct {
	mock *MockNodeBrowser
}

// NewMockNodeBrowser creates a new mock instance.
func NewMockNodeBrowser(ctrl *gomock.Controller) *MockNodeBrowser {
	mock := &MockNodeBrowser{ctrl: ctrl}
	mock.recorder = &MockNodeBrowserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNodeBrowser) EXPECT() *MockNodeBrowserMockRecorder {
	return m.recorder
}

// Attributes mocks base method.
func (m *MockNodeBrowser) Attributes(ctx context.Context, attrs ...ua.AttributeID) ([]*ua.DataValue, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range attrs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Attributes", varargs...)
	ret0, _ := ret[0].([]*ua.DataValue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Attributes indicates an expected call of Attributes.
func (mr *MockNodeBrowserMockRecorder) Attributes(ctx any, attrs ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, attrs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Attributes", reflect.TypeOf((*MockNodeBrowser)(nil).Attributes), varargs...)
}

// BrowseName mocks base method.
func (m *MockNodeBrowser) BrowseName(ctx context.Context) (*ua.QualifiedName, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BrowseName", ctx)
	ret0, _ := ret[0].(*ua.QualifiedName)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BrowseName indicates an expected call of BrowseName.
func (mr *MockNodeBrowserMockRecorder) BrowseName(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BrowseName", reflect.TypeOf((*MockNodeBrowser)(nil).BrowseName), ctx)
}

// ID mocks base method.
func (m *MockNodeBrowser) ID() *ua.NodeID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(*ua.NodeID)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockNodeBrowserMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockNodeBrowser)(nil).ID))
}

// ReferencedNodes mocks base method.
func (m *MockNodeBrowser) ReferencedNodes(ctx context.Context, refType uint32, browseDir ua.BrowseDirection, nodeClassMask ua.NodeClass, includeSubtypes bool) ([]opcua_plugin.NodeBrowser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReferencedNodes", ctx, refType, browseDir, nodeClassMask, includeSubtypes)
	ret0, _ := ret[0].([]opcua_plugin.NodeBrowser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReferencedNodes indicates an expected call of ReferencedNodes.
func (mr *MockNodeBrowserMockRecorder) ReferencedNodes(ctx, refType, browseDir, nodeClassMask, includeSubtypes any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReferencedNodes", reflect.TypeOf((*MockNodeBrowser)(nil).ReferencedNodes), ctx, refType, browseDir, nodeClassMask, includeSubtypes)
}
