# Copyright 2025 UMH Systems GmbH
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Benthos Downsampler Plugin Example
# This configuration demonstrates the downsampler processor plugin with swinging door algorithm
# Testing multiple metrics with different thresholds and data types

logger:
  level: DEBUG
  add_timestamp: true
  static_fields:
    "@service": benthos

input:
  generate:
    mapping: |
      let metric_index = counter() % 5
      let topics = [
        "umh.v1.plant1.line1._historian.temperature",
        "umh.v1.plant1.line1._historian.humidity", 
        "umh.v1.plant1.line1._historian.pressure",
        "umh.v1.plant1.line1._historian.status",
        "umh.v1.plant1.line1._historian.machine_state"
      ]
      
      root = match $metric_index {
        0 => {
          "temperature": (20 + random_int(max: 1000) / 100.0),
          "timestamp_ms": timestamp_unix_milli()
        },
        1 => {
          "humidity": (30 + random_int(max: 4000) / 100.0),
          "timestamp_ms": timestamp_unix_milli()
        },
        2 => {
          "pressure": (1000 + random_int(max: 10000) / 100.0),
          "timestamp_ms": timestamp_unix_milli()
        },
        3 => {
          "status": "RUNNING",  # Constant string value
          "timestamp_ms": timestamp_unix_milli()
        },
        4 => {
          "machine_state": (random_int(max: 100) < 90),  # 90% chance of true
          "timestamp_ms": timestamp_unix_milli()
        }
      }
      
      meta data_contract = "_historian"
      meta umh_topic = $topics.index($metric_index)
    interval: 120ms
    count: 100
pipeline:
  processors:
    - downsampler:
        default:
          swinging_door:
            threshold: 0.5       # Default compression deviation
            min_time: 5s         # Default minimum time interval 
            max_time: 1h         # Default maximum time interval
          late_policy:
            late_policy: passthrough  # Default: forward late messages unchanged (vs drop)
            max_backfill: 24h         # Consider messages late if >24h old
        overrides:
          - pattern: ".+_counter"     # Counter metrics need no compression
            swinging_door:
              threshold: 0.0
              min_time: 0s
              max_time: 0s
          - pattern: "^temp_"         # Temperature sensors - tighter deviation
            swinging_door:
              threshold: 0.25
          - topic: "pressure.sensor.001"  # Specific sensor override
            swinging_door:
              threshold: 1.0
              max_time: 30m
          - pattern: ".*_alarm"       # Alarm states - immediate transmission
            swinging_door:
              threshold: 0.0
              min_time: 0s
            late_policy:
              late_policy: drop       # Drop late alarms - they're time sensitive
              max_backfill: 5m        # Very strict late detection for alarms
          - pattern: "historical_.*"  # Historical reprocessing data
            late_policy:
              late_policy: passthrough  # Always allow historical data through
              max_backfill: 8760h       # 1 year backfill window for historical data

output:
  stdout:
    codec: lines