# Copyright 2025 UMH Systems GmbH
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Benthos Downsampler Plugin - UMH Classic _historian Example
# This configuration demonstrates per-key filtering for multiple metrics in single messages
# Note: Nested values are not supported yet (only flat key-value pairs)

logger:
  level: DEBUG
  add_timestamp: true
  static_fields:
    "@service": benthos

input:
  generate:
    mapping: |
      # Generate UMH classic _historian format with multiple metrics per message
      root = {
        "temperature": (20 + random_int(max: 1000) / 100.0),
        "pressure": (1000 + random_int(max: 10000) / 100.0),
        "humidity": (30 + random_int(max: 4000) / 100.0),
        "status": match (random_int(max: 100) % 3) {
          0 => "RUNNING",
          1 => "IDLE", 
          2 => "MAINTENANCE"
        },
        "machine_enabled": (random_int(max: 100) < 80),  # 80% chance of true
        "timestamp_ms": timestamp_unix_milli()
      }
      
      meta data_contract = "_historian"
      meta umh_topic = "umh.v1.plant1.line1._historian"
    interval: 200ms
    count: 100

pipeline:
  processors:
    - downsampler:
        algorithm: deadband
        default:
          threshold: 2.0     # Default threshold for numeric values
          max_interval: 30s  # Default max interval
        overrides:
          - pattern: "*.temperature"
            threshold: 0.5   # Fine-grained for temperature
          - pattern: "*.humidity" 
            threshold: 1.0   # Medium sensitivity for humidity
          - pattern: "*.pressure"
            threshold: 5.0   # Coarser for pressure 
          - pattern: "*.status"
            threshold: 0.1   # Ignored for strings - uses equality
          - pattern: "*.machine_enabled"
            threshold: 0.1   # Ignored for booleans - uses equality

output:
  stdout:
    codec: lines

# This configuration demonstrates:
# 1. UMH Classic _historian format with multiple metrics per message:
#    {
#      "temperature": 25.36,
#      "pressure": 1015.92, 
#      "humidity": 65.23,
#      "status": "RUNNING",
#      "machine_enabled": true,
#      "timestamp_ms": 1749572647985
#    }
#
# 2. Per-key filtering behavior:
#    - Each metric is evaluated independently using its specific threshold
#    - Keys that don't meet their threshold are REMOVED from the message
#    - Keys that meet their threshold are KEPT in the message
#    - Only if ALL measurement keys are dropped is the entire message dropped
#
# 3. Expected output examples:
#    - Input:  {"temperature": 25.0, "pressure": 1000.0, "humidity": 50.0, "status": "RUNNING", "timestamp_ms": 123}
#    - Output: {"temperature": 25.0, "pressure": 1000.0, "humidity": 50.0, "status": "RUNNING", "timestamp_ms": 123} (first message)
#    
#    - Input:  {"temperature": 25.2, "pressure": 1002.0, "humidity": 50.5, "status": "RUNNING", "timestamp_ms": 124}  
#    - Output: {"humidity": 50.5, "timestamp_ms": 124} (only humidity change > 1.0 threshold, others filtered)
#
#    - Input:  {"temperature": 25.1, "pressure": 1001.0, "humidity": 50.3, "status": "RUNNING", "timestamp_ms": 125}
#    - Output: Message dropped (no keys meet thresholds, only timestamp_ms would remain)
#
# 4. Topic-specific thresholds applied per key:
#    - temperature: 0.5Â°C threshold  
#    - humidity: 1.0% threshold
#    - pressure: 5.0 Pa threshold
#    - status: equality check only (threshold ignored)
#    - machine_enabled: equality check only (threshold ignored)
#
# 5. Architectural notes:
#    - Each key creates its own series state: "umh.v1.plant1.line1._historian.temperature", etc.
#    - Series state is maintained independently per metric
#    - Nested values are not supported yet (planned for future enhancement)
#    - Complex data structures in values will use equality comparison 