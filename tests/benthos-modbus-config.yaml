input:
  modbus:
    addresses:
      - address: 1
        name: FirstFlagOfDiscreteInput
        output: BOOL
        register: discrete
        type: BIT
      - address: 0
        name: ZeroElementOfInputRegister
        register: input
        type: UINT16
    controller: tcp://10.13.37.202:50502
    slaveID: 1
    timeBetweenReads: 1s
    timeout: 1s

pipeline:
  processors:
    - bloblang: |
        # these variables are autogenerated from your instance location
        let enterprise = "enterprise-of-kings"
        let schema = "_historian"
        let tagname = meta("modbus_tag_name")
        let tagType = meta("modbus_tag_datatype_json")
        # the rest from here here on will be autogenerated, see also documentation
        ################################################################
        #
        # The user must provide the following using variables:
        # - $enterprise
        # - $site (optional)
        # - $area (optional)
        # - $line (optional)
        # - $workcell (optional)
        # - $originID (optional)
        # - $schema
        # - $tagname
        # - $tagType (optional)
        #
        # When generating the payload, the user has two options:
        #
        # 1) Setting the $payloadTagName variable to the name of the tag that will be used as the payload and the $value variable to the value of the tag.
        # 2) Setting $payload to the payload that will be used (overwrites $payloadTagName and $value logic).
        #
        ################################################################
        let site = $site.catch("")
        let area = $area.catch("")
        let line = $line.catch("")
        let workcell = $workcell.catch("")
        let originID = $originID.catch("")
        let tagname = $tagname.catch($payloadTagName)
        let raw_topic = "umh.v1." + $enterprise + "." + $site + "." + $area + "." + $line + "." + $workcell + "." + $originID + "." + $schema + "."+ $tagname
        # Normalize topic by replacing multiple dots with a single dot
        let normalized_topic = $raw_topic.re_replace("\\.+", ".")
        # Trim leading & trailing dots
        let trimmed_topic = $normalized_topic.trim(".")
        let tagType = $tagType.catch(null)
        let value = $value.catch(content().string())
        let value = match $tagType {
          "number" => $value.number(),
          "string" => $value.string(),
          "bool" => $value.bool(),
          "raw" => $value,
          this.type() == "number" => $value.number(),
          this.type() == "bool" => $value.bool(),
          this.type() == "string" => $value.string(),
          _ => $value.catch(null)
        }
        # Generate MQTT topic from trimmed topic (replace dots with slashes)
        meta "mqtt_topic" = $trimmed_topic.re_replace("\\.", "/")
        let payloadTagName = $payloadTagName.catch($tagname)
        let genPayload = {
          "timestamp_ms": (timestamp_unix_nano() / 1000000).floor(),
          $payloadTagName: $value.catch(null)
        }
        let sendPayload = $payload.catch($genPayload)
        root = $sendPayload

output:
  broker:
    outputs:
      - resource: mqtt
    pattern: fan_out
output_resources:
  - label: mqtt
    mqtt:
      client_id: benthos-umh-benthos-umh-43042cf9
      topic: ${! meta("mqtt_topic") }
      urls:
        - tcp://10.13.37.240:1883
