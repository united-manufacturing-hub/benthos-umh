// Generated by gen-vectors - DO NOT EDIT
// Static test vectors for Sparkplug B plugin
package sparkplug_plugin

// TestVector represents a test payload with metadata
type TestVector struct {
	Name        string
	Base64Data  string
	Description string
	MessageType string
	MetricCount int
}

// TestVectors contains all static test vectors
var TestVectors = []TestVector{
	// Happy path vectors - basic protocol flow
	{"NBIRTH_V1", "CM7ckZD5MhINCgViZFNlcRABIAhYWBIcChROb2RlIENvbnRyb2wvUmViaXJ0aBACIAtwABIaCgtUZW1wZXJhdHVyZRBkIAppAAAAAACANUAYAA==", "Basic node birth with temperature", "NBIRTH", 3},
	{"NDATA_V1", "CM7ckZD5MhINEGQgCmkAAAAAAIA2QBgB", "Temperature update by alias", "NDATA", 1},
	{"NDEATH_V1", "CM7ckZD5MhINCgViZFNlcRAAIAhYABgA", "Node death certificate", "NDEATH", 1},
	// Edge case vectors - boundary conditions and error cases
	{"NDATA_GAP", "CM7ckZD5MhINEGQgCmkAAAAAAAA7QBgF", "Sequence gap 1→5", "NDATA", 1},
	{"NDATA_BEFORE_BIRTH", "CM7ckZD5MhINEGQgCmkAAAAAAAA5QBgB", "Data without birth context", "NDATA", 1},
	{"NDATA_WRAPAROUND", "CM7ckZD5MhINEGQgCmkAAAAAAAA+QBgA", "Sequence wraparound 255→0", "NDATA", 1},
	// Performance test vectors - large payloads
	{"NBIRTH_LARGE", "CM7ckZD5MhINCgViZFNlcRABIAhYWBIcChROb2RlIENvbnRyb2wvUmViaXJ0aBACIAtwABIXCghNZXRyaWNfMRABIAppAAAAAAAA+D8SFwoITWV0cmljXzIQAiAKaQAAAAAAAAhAEhcKCE1ldHJpY18zEAMgCmkAAAAAAAASQBIXCghNZXRyaWNfNBAEIAppAAAAAAAAGEASFwoITWV0cmljXzUQBSAKaQAAAAAAAB5AEhcKCE1ldHJpY182EAYgCmkAAAAAAAAiQBIXCghNZXRyaWNfNxAHIAppAAAAAAAAJUASFwoITWV0cmljXzgQCCAKaQAAAAAAAChAEhcKCE1ldHJpY185EAkgCmkAAAAAAAArQBIYCglNZXRyaWNfMTAQCiAKaQAAAAAAAC5AEhgKCU1ldHJpY18xMRALIAppAAAAAACAMEASGAoJTWV0cmljXzEyEAwgCmkAAAAAAAAyQBIYCglNZXRyaWNfMTMQDSAKaQAAAAAAgDNAEhgKCU1ldHJpY18xNBAOIAppAAAAAAAANUASGAoJTWV0cmljXzE1EA8gCmkAAAAAAIA2QBIYCglNZXRyaWNfMTYQECAKaQAAAAAAADhAEhgKCU1ldHJpY18xNxARIAppAAAAAACAOUASGAoJTWV0cmljXzE4EBIgCmkAAAAAAAA7QBIYCglNZXRyaWNfMTkQEyAKaQAAAAAAgDxAEhgKCU1ldHJpY18yMBAUIAppAAAAAAAAPkASGAoJTWV0cmljXzIxEBUgCmkAAAAAAIA/QBIYCglNZXRyaWNfMjIQFiAKaQAAAAAAgEBAEhgKCU1ldHJpY18yMxAXIAppAAAAAABAQUASGAoJTWV0cmljXzI0EBggCmkAAAAAAABCQBIYCglNZXRyaWNfMjUQGSAKaQAAAAAAwEJAEhgKCU1ldHJpY18yNhAaIAppAAAAAACAQ0ASGAoJTWV0cmljXzI3EBsgCmkAAAAAAEBEQBIYCglNZXRyaWNfMjgQHCAKaQAAAAAAAEVAEhgKCU1ldHJpY18yORAdIAppAAAAAADARUASGAoJTWV0cmljXzMwEB4gCmkAAAAAAIBGQBIYCglNZXRyaWNfMzEQHyAKaQAAAAAAQEdAEhgKCU1ldHJpY18zMhAgIAppAAAAAAAASEASGAoJTWV0cmljXzMzECEgCmkAAAAAAMBIQBIYCglNZXRyaWNfMzQQIiAKaQAAAAAAgElAEhgKCU1ldHJpY18zNRAjIAppAAAAAABASkASGAoJTWV0cmljXzM2ECQgCmkAAAAAAABLQBIYCglNZXRyaWNfMzcQJSAKaQAAAAAAwEtAEhgKCU1ldHJpY18zOBAmIAppAAAAAACATEASGAoJTWV0cmljXzM5ECcgCmkAAAAAAEBNQBIYCglNZXRyaWNfNDAQKCAKaQAAAAAAAE5AEhgKCU1ldHJpY180MRApIAppAAAAAADATkASGAoJTWV0cmljXzQyECogCmkAAAAAAIBPQBIYCglNZXRyaWNfNDMQKyAKaQAAAAAAIFBAEhgKCU1ldHJpY180NBAsIAppAAAAAACAUEASGAoJTWV0cmljXzQ1EC0gCmkAAAAAAOBQQBIYCglNZXRyaWNfNDYQLiAKaQAAAAAAQFFAEhgKCU1ldHJpY180NxAvIAppAAAAAACgUUASGAoJTWV0cmljXzQ4EDAgCmkAAAAAAABSQBIYCglNZXRyaWNfNDkQMSAKaQAAAAAAYFJAEhgKCU1ldHJpY181MBAyIAppAAAAAADAUkASGAoJTWV0cmljXzUxEDMgCmkAAAAAACBTQBIYCglNZXRyaWNfNTIQNCAKaQAAAAAAgFNAEhgKCU1ldHJpY181MxA1IAppAAAAAADgU0ASGAoJTWV0cmljXzU0EDYgCmkAAAAAAEBUQBIYCglNZXRyaWNfNTUQNyAKaQAAAAAAoFRAEhgKCU1ldHJpY181NhA4IAppAAAAAAAAVUASGAoJTWV0cmljXzU3EDkgCmkAAAAAAGBVQBIYCglNZXRyaWNfNTgQOiAKaQAAAAAAwFVAEhgKCU1ldHJpY181ORA7IAppAAAAAAAgVkASGAoJTWV0cmljXzYwEDwgCmkAAAAAAIBWQBIYCglNZXRyaWNfNjEQPSAKaQAAAAAA4FZAEhgKCU1ldHJpY182MhA+IAppAAAAAABAV0ASGAoJTWV0cmljXzYzED8gCmkAAAAAAKBXQBIYCglNZXRyaWNfNjQQQCAKaQAAAAAAAFhAEhgKCU1ldHJpY182NRBBIAppAAAAAABgWEASGAoJTWV0cmljXzY2EEIgCmkAAAAAAMBYQBIYCglNZXRyaWNfNjcQQyAKaQAAAAAAIFlAEhgKCU1ldHJpY182OBBEIAppAAAAAACAWUASGAoJTWV0cmljXzY5EEUgCmkAAAAAAOBZQBIYCglNZXRyaWNfNzAQRiAKaQAAAAAAQFpAEhgKCU1ldHJpY183MRBHIAppAAAAAACgWkASGAoJTWV0cmljXzcyEEggCmkAAAAAAABbQBIYCglNZXRyaWNfNzMQSSAKaQAAAAAAYFtAEhgKCU1ldHJpY183NBBKIAppAAAAAADAW0ASGAoJTWV0cmljXzc1EEsgCmkAAAAAACBcQBIYCglNZXRyaWNfNzYQTCAKaQAAAAAAgFxAEhgKCU1ldHJpY183NxBNIAppAAAAAADgXEASGAoJTWV0cmljXzc4EE4gCmkAAAAAAEBdQBIYCglNZXRyaWNfNzkQTyAKaQAAAAAAoF1AEhgKCU1ldHJpY184MBBQIAppAAAAAAAAXkASGAoJTWV0cmljXzgxEFEgCmkAAAAAAGBeQBIYCglNZXRyaWNfODIQUiAKaQAAAAAAwF5AEhgKCU1ldHJpY184MxBTIAppAAAAAAAgX0ASGAoJTWV0cmljXzg0EFQgCmkAAAAAAIBfQBIYCglNZXRyaWNfODUQVSAKaQAAAAAA4F9AEhgKCU1ldHJpY184NhBWIAppAAAAAAAgYEASGAoJTWV0cmljXzg3EFcgCmkAAAAAAFBgQBIYCglNZXRyaWNfODgQWCAKaQAAAAAAgGBAEhgKCU1ldHJpY184ORBZIAppAAAAAACwYEASGAoJTWV0cmljXzkwEFogCmkAAAAAAOBgQBIYCglNZXRyaWNfOTEQWyAKaQAAAAAAEGFAEhgKCU1ldHJpY185MhBcIAppAAAAAABAYUASGAoJTWV0cmljXzkzEF0gCmkAAAAAAHBhQBIYCglNZXRyaWNfOTQQXiAKaQAAAAAAoGFAEhgKCU1ldHJpY185NRBfIAppAAAAAADQYUASGAoJTWV0cmljXzk2EGAgCmkAAAAAAABiQBIYCglNZXRyaWNfOTcQYSAKaQAAAAAAMGJAEhgKCU1ldHJpY185OBBiIAppAAAAAABgYkASGAoJTWV0cmljXzk5EGMgCmkAAAAAAJBiQBIZCgpNZXRyaWNfMTAwEGQgCmkAAAAAAMBiQBgA", "Large NBIRTH with 100+ metrics", "NBIRTH", 102},
}

// GetTestVector retrieves a test vector by name
func GetTestVector(name string) *TestVector {
	for _, vector := range TestVectors {
		if vector.Name == name {
			return &vector
		}
	}
	return nil
}
