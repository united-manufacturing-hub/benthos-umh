---
version: '2'

formatters:
  enable: [gci, gofumpt]
  settings:
    gci:
      sections:
        - standard
        - default
        - prefix(github.com/united-manufacturing-hub/benthos-umh)
  exclusions:
    paths: [third_party/]

linters:
  enable:
    - errorlint
    - exhaustive
    - govet
    - gocritic
    - gosec
    - misspell
    - nolintlint
    - revive
    - reassign
    - staticcheck
    - unconvert
    - unparam
    - unused
    - usestdlibvars
    - testifylint
  disable:
    - copyloopvar
    - decorder
    - depguard
    - predeclared
    - thelper
    - usetesting
    - wastedassign

  exclusions:
    paths: [third_party/]
    presets: [comments, common-false-positives, legacy, std-error-handling]
    warn-unused: true

  settings:
    gosec:
      excludes: [G115, G402, G404]

    govet:
      enable-all: true
      disable: [fieldalignment]

    misspell:
      locale: US
      ignore-rules: [cancelled]

    nolintlint:
      require-specific: true

    revive:
      confidence: 0.8
      rules:
        # Blank import should be only in a main or test package, or have a comment justifying it.
        - name: blank-imports
        # context.Context() should be the first parameter of a function when provided as argument.
        - name: context-as-argument
        # Basic types should not be used as a key in `context.WithValue`
        - name: context-keys-type
        # Importing with `.` makes the programs much harder to understand
        - name: early-return
          arguments:
            - preserveScope
        # Empty blocks make code less readable and could be a symptom of a bug or unfinished refactoring.
        - name: empty-block
        # for better readability, variables of type `error` must be named with the prefix `err`.
        - name: error-naming
        # for better readability, the errors should be last in the list of returned values by a function.
        - name: error-return
        # for better readability, error messages should not be capitalized or end with punctuation or a newline.
        - name: error-strings
        # report when replacing `errors.New(fmt.Sprintf())` with `fmt.Errorf()` is possible
        - name: errorf
        # incrementing an integer variable by 1 is recommended to be done using the `++` operator
        - name: increment-decrement
        # highlights redundant else-blocks that can be eliminated from the code
        - name: indent-error-flow
        # This rule suggests a shorter way of writing ranges that do not use the second value.
        - name: range
        # receiver names in a method should reflect the struct name (p for Person, for example)
        - name: receiver-naming
        # redefining built in names (true, false, append, make) can lead to bugs very difficult to detect.
        - name: redefines-builtin-id
        # redundant else-blocks that can be eliminated from the code.
        - name: superfluous-else
          arguments:
            - preserveScope
        # prevent confusing name for variables when using `time` package
        - name: time-naming
        # warns when an exported function or method returns a value of an un-exported type.
        - name: unexported-return
        # spots and proposes to remove unreachable code. also helps to spot errors
        - name: unreachable-code
        # Functions or methods with unused parameters can be a symptom of an unfinished refactoring or a bug.
        - name: unused-parameter
        # Since Go 1.18, interface{} has an alias: any. This rule proposes to replace instances of interface{} with any.
        - name: use-any
        # identifies calls to fmt.Errorf that can be safely replaced by, the more efficient, errors.New.
        - name: use-errors-new
        # report when a variable declaration can be simplified
        - name: var-declaration
        # warns when initialism, variable or package naming conventions are not followed.
        - name: var-naming

    staticcheck:
      checks:
        - all
        - -ST1003
        - -ST1005
        - -ST1011

    testifylint:
      enable-all: true
      disable:
        - encoded-compare
        - float-compare
        - require-error
        - suite-subtest-run

issues:
  max-issues-per-linter: 0
  max-same-issues: 0

output:
  formats:
    text:
      path: stdout
      print-linter-name: true
      print-issued-lines: true
  show-stats: false

run:
  allow-parallel-runners: true
  concurrency: 0 # use all CPUs
  build-tags: [integration]
  modules-download-mode: readonly
  tests: true
  timeout: 15m
  issues-exit-code: 1
