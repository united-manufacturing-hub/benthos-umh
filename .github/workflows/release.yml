---
name: release

on:
  workflow_dispatch:
    inputs:
      environment:
        description: Environment to release
        required: true
      ref:
        description: Ref to release
        required: true
        default: master
  repository_dispatch:
    types:
      - release

jobs:
  deploy:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.client_payload.ref }}${{ github.event.inputs.ref }}
      - name: Start deployment
        uses: bobheadxi/deployments@v0.4.3
        id: deployment
        with:
          step: start
          env: ${{ github.event.inputs.environment }}${{ github.event.client_payload.environment }}
          desc: ${{ github.event.client_payload.ref }}${{ github.event.client_payload.ref }}
          ref: ${{ github.event.client_payload.ref }}${{ github.event.inputs.ref }}
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: '1.17'
      - uses: actions/cache@v2
        with:
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Build
        run: make benthos-lambda
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'
      - name: Cache npm packages
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
            ${{ runner.os }}-
      - name: Install dependencies
        run: npm ci
      - name: Build
        run: npm run build
      - name: Serverless deploy to production from ${{ github.event.client_payload.ref }}${{ github.event.inputs.ref }}
        run: npm run deploy
        if: ${{ github.event.inputs.environment == 'production' || github.event.client_payload.environment == 'production' }}
        env:
          SERVERLESS_STAGE: prod
      - name: Serverless deploy to staging from ${{ github.event.client_payload.ref }}${{ github.event.inputs.ref }}
        run: npm run deploy
        if: ${{ github.event.inputs.environment == 'staging' || github.event.client_payload.environment == 'staging' }}
        env:
          SERVERLESS_STAGE: stg
      - name: Finish deployment
        uses: bobheadxi/deployments@v0.4.3
        if: always()
        with:
          step: finish
          status: ${{ job.status }}
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}
          token: ${{ secrets.GITHUB_TOKEN }}
