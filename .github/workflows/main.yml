# Copyright 2023 UMH Systems GmbH
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
name: main

on:
  push:
    branches:
      - '**'
    tags:
      - v*
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-docker:
    permissions:
      packages: write
      contents: read
    timeout-minutes: 60
    strategy:
      matrix:
        architecture: ['amd64', 'arm64', 'arm/v7']
    runs-on:
      group: ${{ matrix.architecture == 'arm64' && 'arc-runners-small' || matrix.architecture == 'arm/v7' && 'arc-runners-small' || 'arc-runners' }}
    outputs:
      BUILD_TAG: ${{ steps.output-build-tag.outputs.BUILD_TAG }}
    env:
      PR_ID: ${{ github.event.pull_request.number }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request && github.head_ref || github.ref_name }}

      - name: Check if Docker daemon is running
        id: check_docker
        run: |
          SECONDS=0
          TIMEOUT=120
          while ! docker info >/dev/null 2>&1; do
            if [ $SECONDS -ge $TIMEOUT ]; then
              echo "Docker daemon is not running after ${TIMEOUT} seconds, exiting..."
              docker info
              exit 1
            fi
            echo "Waiting for Docker daemon to start..."
            sleep 1
          done
          echo "Docker daemon is running."

      - name: Login to GitHub Container registry
        uses: docker/login-action@v3
        env:
          GITHUB_USER: ${{ github.actor }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          registry: ghcr.io
          username: $GITHUB_USER
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3
        with:
          image: management.umh.app/oci/tonistiigi/binfmt:latest

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Setup variables and build
        id: build-and-output
        run: |
          export GIT_TAG=$(git describe --tags --always)
          export DOCKER_FILE=./Dockerfile
          export PLATFORM=${{ matrix.architecture }}
          export PLATFORM_SHORT=${{ format(matrix.architecture, '/', '-') }}

          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/master" ]]; then
            export BUILD_TAG=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:master-${PLATFORM_SHORT}
          elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
            export BUILD_TAG=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:pr-${{ github.event.pull_request.number }}-${PLATFORM_SHORT}
          elif [[ "${{ github.event_name }}" == "merge_group" ]]; then
            export BUILD_TAG=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$(git rev-parse --abbrev-ref HEAD)-${PLATFORM_SHORT}
          elif [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == refs/tags/* ]]; then
            export BUILD_TAG=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${GIT_TAG}-${PLATFORM_SHORT}
          fi

          docker buildx build --platform linux/${PLATFORM} --provenance=false --progress=plain \
            --build-arg APP_VERSION=${GIT_TAG} -t ${BUILD_TAG} -f ${DOCKER_FILE} --push .

          echo "BUILD_TAG=${BUILD_TAG}" >> $GITHUB_OUTPUT
          echo "BUILD_TAG=${BUILD_TAG}"

  create-manifests:
    needs: build-docker
    if: needs.build-docker.outputs.BUILD_TAG != ''
    permissions:
      contents: read
      packages: write
    runs-on:
      group: arc-runners
    defaults:
      run:
        shell: bash
    steps:
      - name: Login to GitHub Container registry
        uses: docker/login-action@v3
        env:
          GITHUB_USER: ${{ github.actor }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          registry: ghcr.io
          username: $GITHUB_USER
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create multiarch manifests
        run: |
            docker buildx imagetools create -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build-docker.outputs.BUILD_TAG }} \
              ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build-docker.outputs.BUILD_TAG }}-amd64 \
              ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build-docker.outputs.BUILD_TAG }}-arm64 \
              ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build-docker.outputs.BUILD_TAG }}-arm-v7
