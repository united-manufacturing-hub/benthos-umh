# Copyright 2023 UMH Systems GmbH
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
name: opcua-plc

on:
  push:
    branches:
      - '**'
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

concurrency:
  group: opcua-plc-test
  cancel-in-progress: true

jobs:
  go-test-opcua-plc:
    runs-on:
      group: arc-runners-tests
    permissions:
      packages: write
      contents: read
    timeout-minutes: 30
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Go
        uses: ./.github/actions/setup-go
      - name: Install Ginkgo
        run: go install github.com/onsi/ginkgo/v2/ginkgo@v2.22.1
      - name: Install Tcping
        run: go install github.com/cloverstd/tcping@v0.1.1
      - name: Check S7 port availability
        id: check_s7
        run: |
          set +x
          URI="${{ secrets.TEST_S7_ENDPOINT_URI }}"
          ENDPOINT="${URI#opc.tcp://}"
          if tcping -c 4 -T 1s "$ENDPOINT" | grep -qi "Connected"; then
            echo "available=true" >> "$GITHUB_OUTPUT"
            echo "TEST_S7_ENDPOINT_URI=${{ secrets.TEST_S7_ENDPOINT_URI }}" >> "$GITHUB_ENV"
            echo "TEST_S7_FINGERPRINT=${{ secrets.TEST_S7_FINGERPRINT }}" >> "$GITHUB_ENV"
            echo "using s7-main device for testing"
          else
            echo "available=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Check S7-fallback port availability
        id: check_s7_fallback
        if: ${{ steps.check_s7.outputs.available == 'false' }}
        run: |
          set +x
          URI="${{ secrets.TEST_S7_ENDPOINT_URI_FALLBACK }}"
          ENDPOINT="${URI#opc.tcp://}"
          if tcping -c 4 -T 1s "$ENDPOINT" | grep -qi "Connected"; then
            echo "available=true" >> "$GITHUB_OUTPUT"
            echo "TEST_S7_ENDPOINT_URI=${{ secrets.TEST_S7_ENDPOINT_URI_FALLBACK }}" >> "$GITHUB_ENV"
            echo "TEST_S7_FINGERPRINT=${{ secrets.TEST_S7_FINGERPRINT_FALLBACK }}" >> "$GITHUB_ENV"
            echo "using s7-fallback device for testing"
          else
            echo "available=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Check Wago port availability
        id: check_wago
        run: |
          set +x
          URI="${{ secrets.TEST_WAGO_ENDPOINT_URI }}"
          ENDPOINT="${URI#opc.tcp://}"
          if tcping -c 4 -T 1s "$ENDPOINT" | grep -qi "Connected"; then
            echo "available=true" >> "$GITHUB_OUTPUT"
            echo "TEST_WAGO_ENDPOINT_URI=${{ secrets.TEST_WAGO_ENDPOINT_URI }}" >> "$GITHUB_ENV"
            echo "TEST_WAGO_FINGERPRINT=${{ secrets.TEST_WAGO_FINGERPRINT }}" >> "$GITHUB_ENV"
            echo "using wago-main device for testing"
          else
            echo "available=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Check Wago-fallback port availability
        id: check_wago_fallback
        if: ${{ steps.check_wago.outputs.available == 'false' }}
        run: |
          set +x
          URI="${{ secrets.TEST_WAGO_ENDPOINT_URI_FALLBACK }}"
          ENDPOINT="${URI#opc.tcp://}"
          if tcping -c 4 -T 1s "$ENDPOINT" | grep -qi "Connected"; then
            echo "available=true" >> "$GITHUB_OUTPUT"
            echo "TEST_WAGO_ENDPOINT_URI=${{ secrets.TEST_WAGO_ENDPOINT_URI_FALLBACK }}" >> "$GITHUB_ENV"
            echo "TEST_WAGO_FINGERPRINT=${{ secrets.TEST_WAGO_FINGERPRINT_FALLBACK }}" >> "$GITHUB_ENV"
            echo "using wago-fallback device for testing"
          else
            echo "available=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Test
        env:
          TEST_WAGO_USERNAME: ${{ secrets.TEST_WAGO_USERNAME }}
          TEST_WAGO_PASSWORD: ${{ secrets.TEST_WAGO_PASSWORD }}
        run: |
          if [ -z "$TEST_S7_ENDPOINT_URI" ]; then
            echo "no s7-endpoint available for testing"
            exit 1
          fi
          if [ -z "$TEST_WAGO_ENDPOINT_URI" ]; then
            echo "no wago-endpoint available for testing"
            exit 1
          fi
          make test-opc

  go-test-kepware-plc:
    needs: go-test-opcua-plc
    runs-on:
      group: arc-runners-tests
    permissions:
      packages: write
      contents: read
    timeout-minutes: 30
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Go
        uses: ./.github/actions/setup-go
      - name: Install Ginkgo
        run: go install github.com/onsi/ginkgo/v2/ginkgo@v2.22.1
      - name: Install Tcping
        run: go install github.com/cloverstd/tcping@v0.1.1

      - name: Check Kepware port availability
        id: check_kepware
        run: |
          set +x
          CURRENT_MINUTE=$(date +%M)
          CURRENT_HOUR=$(date +%H)

          # make timecheck since we restart kepware-runtime every 2 hours and
          # don't want to unneccessaryly fail here
          if [ "$CURRENT_MINUTE" -eq "00" ] && [ $((10#$CURRENT_HOUR % 2)) -eq 0 ]; then
            sleep 60
          fi

          URI="${{ secrets.TEST_KEPWARE_ENDPOINT }}"
          ENDPOINT="${URI#opc.tcp://}"
          if tcping -c 4 -T 1s "$ENDPOINT" | grep -qi "Connected"; then
            echo "available=true" >> "$GITHUB_OUTPUT"
            echo "TEST_KEPWARE_ENDPOINT=${{ secrets.TEST_KEPWARE_ENDPOINT }}" >> "$GITHUB_ENV"
            echo "TEST_KEPWARE_FINGERPRINT=${{ secrets.TEST_KEPWARE_FINGERPRINT }}" >> "$GITHUB_ENV"
            echo "using kepware for testing"
          else
            echo "available=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Test
        env:
          TEST_KEPWARE_USERNAME: ${{ secrets.TEST_KEPWARE_USERNAME }}
          TEST_KEPWARE_PASSWORD: ${{ secrets.TEST_KEPWARE_PASSWORD }}
        run: |
          if [ -z "$TEST_KEPWARE_ENDPOINT" ]; then
            echo "no kepware-endpoint available for testing"
            exit 1
          fi
          make test-opc
