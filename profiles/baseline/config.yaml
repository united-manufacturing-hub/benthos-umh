http:
    enabled: true
    address: 0.0.0.0:4195
    root_path: /benthos
    debug_endpoints: true
    cert_file: ""
    key_file: ""
    cors:
        enabled: false
        allowed_origins: []
    basic_auth:
        enabled: false
        realm: restricted
        username: ""
        password_hash: ""
        algorithm: sha256
        salt: ""
input:
    label: ""
    opcua:
        endpoint: "opc.tcp://10.13.37.102:49320"
        nodeIDs:
            - "i=1"
            - "i=2255"
            - "ns=2;s=Kanal1.tagGen1.Bool 1-1000.rampBool1"
            - "ns=2;s=Kanal1.tagGen1.Bool 1-1000.rampBool2"
            - "ns=2;s=Kanal1.tagGen1.Bool 1-1000.rampBool3"
            - "ns=2;s=Kanal1.tagGen1.Bool 1-1000.rampBool4"
            - "ns=2;s=Kanal1.tagGen1.Bool 1-1000.rampBool5"
            - "ns=2;s=Kanal1.tagGen1.Bool 1-1000.rampBool6"
            - "ns=2;s=Kanal1.tagGen1.Bool 1-1000.rampBool7"
            - "ns=2;s=Kanal1.tagGen1.Bool 1-1000.rampBool8"
            - "ns=2;s=Kanal1.tagGen1.Bool 1-1000.rampBool9"
            - "ns=2;s=Kanal1.tagGen1.Bool 1-1000.rampBool10"
            - "ns=2;s=Kanal1.tagGen1.Bool 1-1000.rampBool11"
            - "ns=2;s=Kanal1.tagGen1.Bool 1-1000.rampBool12"
            - "ns=2;s=Kanal1.tagGen1.Bool 1-1000.rampBool13"
            - "ns=2;s=Kanal1.tagGen1.Bool 1-1000.rampBool14"
            - "ns=2;s=Kanal1.tagGen1.Bool 1-1000.rampBool15"
            - "ns=2;s=Kanal1.tagGen1.Bool 1-1000.rampBool16"
            - "ns=2;s=Kanal1.tagGen1.Bool 1-1000.rampBool17"
            - "ns=2;s=Kanal1.tagGen1.Bool 1-1000.rampBool18"
            - "ns=2;s=Kanal1.tagGen1.Bool 1-1000.rampBool19"
            - "ns=2;s=Kanal1.tagGen1.Bool 1-1000.rampBool20"
            - "ns=2;s=Kanal1.tagGen1.Bool 1-1000.rampBool21"
            - "ns=2;s=Kanal1.tagGen1.Bool 1-1000.rampBool22"
            - "ns=2;s=Kanal1.tagGen1.Bool 1-1000.rampBool23"
            - "ns=2;s=Kanal1.tagGen1.Bool 1-1000.rampBool24"
            - "ns=2;s=Kanal1.tagGen1.Bool 1-1000.rampBool25"
            - "ns=2;s=Kanal1.tagGen1.Bool 1-1000.rampBool26"
            - "ns=2;s=Kanal1.tagGen1.Bool 1-1000.rampBool27"
            - "ns=2;s=Kanal1.tagGen1.Bool 1-1000.rampBool28"
            - "ns=2;s=Kanal1.tagGen1.Bool 1-1000.rampBool29"
            - "ns=2;s=Kanal1.tagGen1.Bool 1-1000.rampBool30"
            - "ns=2;s=Kanal1.tagGen1.Bool 1-1000.rampBool31"
            - "ns=2;s=Kanal1.tagGen1.Bool 1-1000.rampBool32"
            - "ns=2;s=Kanal1.tagGen1.Bool 1-1000.rampBool33"
            - "ns=2;s=Kanal1.tagGen1.Bool 1-1000.rampBool34"
            - "ns=2;s=Kanal1.tagGen1.Bool 1-1000.rampBool35"
            - "ns=2;s=Kanal1.tagGen1.Bool 1-1000.rampBool36"
            - "ns=2;s=Kanal1.tagGen1.Bool 1-1000.rampBool37"
            - "ns=2;s=Kanal1.tagGen1.Bool 1-1000.rampBool38"
            - "ns=2;s=Kanal1.tagGen1.Bool 1-1000.rampBool39"
            - "ns=2;s=Kanal1.tagGen1.Bool 1-1000.rampBool40"
        subscribeEnabled: true
        useHeartbeat: true
buffer:
    none: {}
pipeline:
    threads: -1
    processors:
        - label: ""
          tag_processor:
            defaults: |
                // Set default metadata for all tags
                msg.meta.location_path = "enterprise.factory_a.production_area.line1.station5";
                msg.meta.data_contract = "_historian";

                // Use the OPC-UA tag path and name from the plugin
                if (msg.meta.opcua_tag_path) {
                  msg.meta.virtual_path = msg.meta.opcua_tag_path;
                }
                if (msg.meta.opcua_tag_name) {
                  msg.meta.tag_name = msg.meta.opcua_tag_name;
                } else if (msg.meta.opcua_node_id) {
                  // Fallback to node ID if no tag name available
                  msg.meta.tag_name = msg.meta.opcua_node_id.replace(/[^a-zA-Z0-9_]/g, '_');
                }

                return msg;
            conditions:
                - if: msg.meta.opcua_node_id === "i=1"
                  then: |
                    //console.log("Processing special node i=1 - applying hex encoding");

                    // Set special path for system node
                    msg.meta.location_path = "enterprise.factory_a.system.opc_server";
                    msg.meta.virtual_path = "system.nodes";
                    msg.meta.tag_name = "server_state_hex";

                    // Convert payload to hex if it's a number
                    if (typeof msg.payload.value === 'number') {
                      var hexValue = msg.payload.value.toString(16).toUpperCase();
                      msg.payload = {
                        value: hexValue,
                        timestamp_ms: msg.payload.timestamp_ms || Date.now(),
                        original_value: msg.payload.value
                      };
                    }

                    return msg;
                - if: msg.meta.opcua_node_id === "i=2255"
                  then: |
                    //console.log("Processing special node i=2255 - applying custom path");

                    // Set custom path for this specific node
                    msg.meta.location_path = "enterprise.factory_a.maintenance.diagnostics";
                    msg.meta.virtual_path = "server.status";
                    msg.meta.tag_name = "diagnostic_info";
                    msg.meta.data_contract = "_maintenance";

                    // Add some additional metadata for maintenance tracking
                    msg.meta.maintenance_category = "server_diagnostics";
                    msg.meta.priority = "high";

                    return msg;
                - if: msg.meta.opcua_node_id && msg.meta.opcua_node_id.includes("rampBool")
                  then: |
                    // Extract bool number from tag name
                    var match = msg.meta.opcua_node_id.match(/rampBool(\d+)/);
                    var boolNum = match ? parseInt(match[1]) : 0;

                    // Group bools into logical sections
                    var section = "group_a";
                    if (boolNum > 20) section = "group_c";
                    else if (boolNum > 10) section = "group_b";

                    // Set structured virtual path
                    msg.meta.virtual_path = "boolean_signals." + section + ".ramp_controls";
                    msg.meta.tag_name = "ramp_bool_" + boolNum;

                    // Add signal metadata
                    msg.meta.signal_type = "boolean";
                    msg.meta.signal_group = section;
                    msg.meta.signal_index = boolNum;

                    return msg;
            advancedProcessing: |
                // Final processing - add timestamp and validate data
                if (!msg.payload.timestamp_ms) {
                  msg.payload.timestamp_ms = Date.now();
                }

                // Add processing metadata
                msg.meta.processed_at = new Date().toISOString();
                msg.meta.processor_version = "1.0.0";

                // Log the final topic structure for debugging
                var virtualPath = msg.meta.virtual_path || 'none';
                //console.log("Final processing: " + msg.meta.location_path + "." + msg.meta.data_contract + "." + virtualPath + "." + msg.meta.tag_name);

                return msg;
output:
    label: ""
    stdout: {}
logger:
    level: INFO
    format: logfmt
    add_timestamp: false
    level_name: level
    timestamp_name: time
    message_name: msg
    static_fields:
        '@service': benthos
    file:
        path: ""
        rotate: false
        rotate_max_age_days: 0
metrics:
    prometheus:
        use_histogram_timing: false
        histogram_buckets: []
        summary_quantiles_objectives:
            - quantile: 0.5
              error: 0.05
            - quantile: 0.9
              error: 0.01
            - quantile: 0.99
              error: 0.001
        add_process_metrics: false
        add_go_metrics: false
        push_job_name: benthos_push
        push_basic_auth:
            username: ""
            password: ""
        file_output_path: ""
    mapping: ""
tracer:
    none: {}
shutdown_delay: 0s
shutdown_timeout: 20s
tests: []
