// Copyright 2025 UMH Systems GmbH
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


syntax = "proto3";

package umh.events;

option go_package = "tag_browser_plugin.protobuf";

import "google/protobuf/wrappers.proto";

// ---------- UNS tree -------------------------------------------------------

message UnsInfo {
  string enterprise                       = 1; // This must always be set
  google.protobuf.StringValue site        = 2; // Optional
  google.protobuf.StringValue area        = 3; // Optional
  google.protobuf.StringValue line        = 4; // Optional
  google.protobuf.StringValue work_cell   = 5; // Optional
  google.protobuf.StringValue origin_id   = 6; // Optional
  string schema                           = 7; // This must always be set
  google.protobuf.StringValue event_group = 8; // Optional
  google.protobuf.StringValue event_tag   = 9; // Optional
}

message UnsMap {
  // Key is the UNS Tree id, which is basically a fast hash over the UnsInfo entries
  map<string, UnsInfo> entries = 1;
}

// ---------- Kafka metadata -------------------------------------------------
// These metadata are coming directly from the Kafka broker

message EventKafka {
  // This version does not contain fields like topic, key
  // Since there cannot be a user defined key and the topic will always be umh.messages
  map<string,string> headers = 1;
  int64  inserted_timestamp  = 2; // As seen by kafka
}

// ---------- Event table ----------------------------------------------------

message EventTableEntry {
  string                 uns_tree_id   = 1; // Generated by the hash over it's UnsInfo
  string                 value         = 2; // This is the json payload of our event
  int64                  timestamp_ms  = 3; // Extracted from the payload
  bool                   is_timeseries = 4; // True if time series data as defined by our payload format, false otherwise
  EventKafka             raw_kafka_msg = 5;
  string                 origin        = 6; // If present inside the messages headers
  repeated string        bridged_by    = 7; // If present inside the messages headers
}

message EventTable {
  repeated EventTableEntry entries = 1;
}

// ---------- UNS Bundle ----------------------------------------------------
message UnsBundle {
  UnsMap uns_map = 1;
  EventTable events = 2;
}
