// Copyright 2025 UMH Systems GmbH
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


syntax = "proto3";

package umh.events;

option go_package = "tag_browser_plugin.protobuf";

import "google/protobuf/wrappers.proto";
import "google/protobuf/any.proto";

// ---------- Topic info -------------------------------------------------------

message TopicInfo {
  string level0                           = 1; // This must always be set
  google.protobuf.StringValue level1      = 2; // Optional
  google.protobuf.StringValue level2      = 3; // Optional
  google.protobuf.StringValue level3      = 4; // Optional
  google.protobuf.StringValue level4      = 5; // Optional
  google.protobuf.StringValue level5      = 6; // Optional
  string datacontract                     = 7; // This must always be set
  google.protobuf.StringValue virtual_path = 8; // Optional
  google.protobuf.StringValue event_tag   = 9; // Optional
}

message TopicMap {
  // Key is the UNS Tree id, which is basically a fast hash over the TopicInfo entries
  // A hash was chosen over the full topic name, as it is smaller, while still giving good enough   uniqueness.
  map<string, TopicInfo> entries = 1;
}

// ---------- Kafka metadata -------------------------------------------------
// These metadata are coming directly from the Kafka broker

message EventKafka {
  // This version does not contain fields like topic, key
  // Since there cannot be a user defined key and the topic will always be umh.messages
  map<string,string> headers = 1;
  string payload             = 2; // Raw payload of the message
}

// ---------- Event table ----------------------------------------------------

message EventTableEntry {
  string                      uns_tree_id   = 1; // Generated by the hash over it's TopicInfo
  google.protobuf.Any         value         = 2; // This is the inner payload of our event. Since this can be any kind of data we represent it here as such
  google.protobuf.Int64Value  timestamp_ms  = 3; // Extracted from the payload (If timeseries data)
  bool                        is_timeseries = 4; // True if time series data as defined by our payload format, false otherwise
  EventKafka                  raw_kafka_msg = 5;
  string                      origin        = 6; // If present inside the messages headers
  repeated string             bridged_by    = 7; // If present inside the messages headers
}

message EventTable {
  repeated EventTableEntry entries = 1;
}

// ---------- UNS Bundle ----------------------------------------------------

// UnsBundle contains both, a map of all new topics
// and a list of all events for those topics that where processed in this batch.
message UnsBundle {
  TopicMap uns_map  = 1;
  EventTable events = 2;
}
