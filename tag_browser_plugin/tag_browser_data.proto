// Copyright 2025 UMH Systems GmbH
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This protobuf definition defines the data structures used by the Tag Browser plugin
// to process and organize messages from the UNS system.
// The structures are designed to efficiently handle both timeseries and non-timeseries data,
// while maintaining topic hierarchy and metadata information.

syntax = "proto3";

package umh.events;

option go_package = "tag_browser_plugin.protobuf";

import "google/protobuf/wrappers.proto";
import "google/protobuf/any.proto";

// ---------- Topic info -------------------------------------------------------

// TopicInfo represents the hierarchical structure of a topic in the UNS system.
// It contains all metadata and hierarchy levels that can be associated with a topic.
// This structure is used to maintain consistency and provide fast lookups in the tag browser.
message TopicInfo {
  string level0                            = 1; // The root level of the topic hierarchy (e.g., "factory")
  google.protobuf.StringValue level1       = 2; // First sublevel (e.g., "production_line")
  google.protobuf.StringValue level2       = 3; // Second sublevel (e.g., "machine")
  google.protobuf.StringValue level3       = 4; // Third sublevel (e.g., "component")
  google.protobuf.StringValue level4       = 5; // Fourth sublevel (e.g., "sensor")
  google.protobuf.StringValue level5       = 6; // Fifth sublevel (e.g., "measurement")
  string datacontract                      = 7; // The data contract type (e.g., "_historianv2", "relational")
  google.protobuf.StringValue virtual_path = 8; // Optional virtual path for even finer grade seperation
  google.protobuf.StringValue event_tag    = 9; // Optional event tag of the message
  map<string,string> metadata              = 10;// All headers ever observed for this topic
}

// TopicMap provides a fast lookup structure for topics using their UNS Tree ID as the key.
// The UNS Tree ID is a hash of the TopicInfo fields, providing a compact unique identifier.
message TopicMap {
  // Key is the UNS Tree id, which is a hash over the TopicInfo entries.
  // Using a hash instead of the full topic name reduces storage requirements while maintaining uniqueness.
  map<string, TopicInfo> entries = 1;
}

// ---------- Kafka metadata -------------------------------------------------
// These structures represent the raw Kafka message data before processing.

message EventKafka {
  // Contains the raw Kafka message data.
  // Note: Topic and key fields are omitted as they are fixed in the UNS system.
  map<string,string> headers = 1; // Kafka message headers
  bytes payload             = 2;  // Raw message payload
}

// ---------- Event table ----------------------------------------------------

// EventTableEntry represents a single processed event in the system.
// It contains both the event data and metadata about how it was processed.
message EventTableEntry {
  string                      uns_tree_id   = 1; // Hash of the associated TopicInfo
  google.protobuf.Any         value         = 2; // The actual event payload, can be any type
  google.protobuf.Int64Value  timestamp_ms  = 3; // Event timestamp (for timeseries data)
  bool                        is_timeseries = 4; // Indicates if this is timeseries data
  EventKafka                  raw_kafka_msg = 5; // Original Kafka message data
  repeated string             processed_by  = 6; // List of processors that have handled this message
}

// EventTable contains a batch of processed events.
message EventTable {
  repeated EventTableEntry entries = 1;
}

// ---------- UNS Bundle ----------------------------------------------------

// UnsBundle is the main output structure of the Tag Browser plugin.
// It combines new or changed topics with their associated events in a single message.
// This structure enables efficient batching and reduces traffic.
message UnsBundle {
  TopicMap uns_map  = 1; // Map of new or changed topics
  EventTable events = 2; // Events associated with these topics
}
